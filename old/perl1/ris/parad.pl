#!/usr/bin/perl -w
# perl parad.pl in

$v     = 'аеёиоуыэюя';            # $гласная
$c = 'бвгджзйклмнпрстфхцчшщ'; # $согласная
$k = "кгх";
$sh = "жчшщ";

while (<>) {
  chomp;
  # my ($w, $a) = split /\t/; $w = accent($w, $a); print "$w,$a\n";
  $r = razrjad($_); # грамматический разряд
  # дефекты парадигмы
  $mc = mclass ($_, $r); # морфологический класс
  $t = tip_sklonenija($_,$r,$mc); # тип склонения
  $w = split_oo($_, $t);
  $uw = c_du($w);
#  print "$uw:$mc:$t\n";
  $uw =~ s/\|.*/\|ами/;
#    $uw =~ s/\|.*/\|у/;
  $dw = c_ud($uw);
print "$dw:$mc:$t\n";
}

sub accent {
  my ($w, $a) = @_;
  if ($a =~ /a\((\d+)/) { $a = $1 }
  elsif ($a =~ /e\((\d+)/) { $a = $1; substr($w, $a-1, 1) = 'ё' }
  substr($w, $a-1, 1) =~ tr/аеёиоуыэюя/┬┼█▐▒√ °· /;
  $w
}

sub razrjad {
  local ($_) = @_;
  return "sb" if (/^(один|два|три|четыре|потора|оба|двое|трое|четверо|пятеро|шестеро|семеро|восьмеро|девятеро|десятеро)$/);
  return "sb" if (/^(столько|сколько|несколько)$/);
  return "sb" if (/^(все|некоторые|многие|немногие|каждый)$/);
  return "nb" if (/^(пол|пять|шесть|семь|восемь|девять|десять|одиннадцать|двенадцать|тринадцать|четырнадцать|пятнадцать|шестнадцать|семнадцать|восемнадцать|девятнадцать|двадцать|тридцать|сорок|пятнадцать|шестьдесят|семьдесят|восемьдесят|девяносто|сто|полтораста|двести|треста|четыреста|пятьсот|шестьсот|семьсот|восемьсот|девятьсот|тысяча)$/);
  return "nb" if (/^(столько|сколько|несколько|много|немного|мало|немало)$/);
  return "nb" if (/^(я|ты|он|она|оно|мы|вы|они|себя|друг друга|кто|что|никто|ничто|некто|нечто|некого|нечего)$/);
  return "nb" if (/^(все|некоторые|многие|всякое|прочее|остальное)$/);
  if (/(ый|ий|ой|ийся|ов|ёв|ев|ин|ын)$/) {
    return "pril";
  } else {
    return "susch";
  }
}

sub tip_sklonenija {
  local ($_) = shift;
  my ($r) = shift;
  my ($mc) = shift;
  if ($r eq "sb" or $r eq "nb") { return "1с"; }
  if ($r eq "pril") { return "ар"; }
  if ($r eq "susch") {
    if (/ь$/) {
      if ($mc eq "м" && $_ ne "путь") { return "1с" } else { return "2с" }
    }
    return "1с";
  }
}

sub mclass {
  local ($_) = shift;
  my ($r) = shift;
  if (/е$/) { return "м" }
  if (/[оеё]$/ or /мя|ееся|ийся$/) { return "с" }
  if (/[ая]$/) { return "ж" }
  if (/ь$/) {
    if (/[$sh]ь$/ or /[бпвфм]ь$/) { return "ж" }
    return "ж";
  }
  return "м";
}

sub split_oo {
  local ($_) = shift;
  my ($t) = shift;
  if ($t eq "ар") { s/(.*)(..)$/$1|$2/; }
  else {
    if (/([$vьй])$/) { s/(.)$/|$1/; }
    else { $_ .= "|" }
  }
  $_
}

sub c_du {
  local ($_) = shift;
  s/я/\'а/; s/ю/\'у/; s/ё/\'о/;
  s/й\|/йj\|/;
  s/й(?![j])/j/;
  s/\'/j/;
  s/ь(?![о])/\'/;
  s/\|j/j\|/;
  s/\|\'/\'\|/;
  $_
}

sub c_ud {
  local ($_) = shift;
  s/([^л])\'([нлрцст])/$1$2/;
  s/([$c])(j|\|j)/$1\'/;
  s/([$k$sh])ы/$1и/;
  s/j\|/\|j/;
  s/\'\|/\|\'/;
  s/[j\']а/я/;
  s/[j\']у/ю/;
  s/[j\']о/ё/;
  s/[j\']е/е/;
  s/[j\']ы/и/;
  s/j/й/;
  s/\'/ь/;
  s/\|//g;
  $_
}
