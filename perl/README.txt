


try w/o exceptions:

try w/o 'сб':
взять: взму->возьмУ ...

try w/o comments:
честь _прош. нет_: чел;челА;челО;челИ -> чёл;чла;чло;чли
i.e. w/o \tф[знп]
prifn
prifp
prifz

try w/o *, **, ч, ч2, ч3:
вОльный: вольн->вОлeн

* TODO: homograph (synonims) wordforms from rus.parad.all

perl -le 'while(<>){s/[-\#\*\?]//g;/(.*):(.*)/&&$w->{$1}->{$2}++}map{print "$_ ",join(" ",keys%{$w->{$_}})if(keys%{$w->{$_}}>1)}sort keys%{$w}' rus.parad.all
лечу лечить лететь

* TODO: find all palindromes (acronyms, anagrams) from all wordforms

self:
шалаш - шалаш
йогой - йогой

mutual:
хорош - шорох

sort -u > a
perl reverse sort -u > b
comm a b


/root/usr/lang/rus/starling/z/TODO:

* Сколько и какие существительные склоняются по образцу "Имя"?
(old)perl -F\\t -alne 'print if ($F[0]=~/мя$/ && $F[2]=~/^[мжс]о?$/);' ../conv/z.tab
(bad)perl -ne 'print "$1 " if(/\tт:с\t/&&/^с:(\S+мя)\t/)' zaliz.adb
(bad)беремя бремя время вымя знамя имя льносемя пламя племя полуимя полымя семя стремя темя
perl -ne 'print "$1 " if(/\tт:с\t/&&/\tи:8\tу1:c\tчё\tч2/&&/^с:(\S+)/)' zaliz.adb
бремя время вымя имя пламя племя полуимя

* Верно ли, что все существительные на "-пь", "-бь", "-вь", "-мь", "-фь" -
женского рода? Если нет, то каковы исключения?
(old)perl -F\\t -alne 'print if ($F[0]=~/[пбвмф]ь$/ && $F[2]=~/^[мжс]о?$/ && $F[2]!~/^жо?$/);' ../conv/z.tab
(old)perl -F\\t -alne 'print if ($F[0]=~/[пбвмф]ь$/ && $F[2]=~/^[мс]о?$/);' ../conv/z.tab
(old)perl -ne 'print if (/^.*[пбвмф]ь\t/ && /\tpos:с/ && $_!~/\tg:ж/)' ../conv/z.full
(old)perl -ne 'print if (/^.*[пбвмф]ь\t/ && /\tpos:с/ && /\tg:[^ж]/)' ../conv/z.full
(old)perl -ne 'print if (/w:.*[пбвмф]ь\t/ && /\tpos:с/ && /\tg:ж/)' z.tab
perl -ne 'print "$1 " if(/\tр:[^ж]/&&/^с:(\S+[пбвмф]ь)\t/)' zaliz.adb
голубь червь

* Верно ли, что у всех существительных на "-ок" гласная "о" - беглая?
(old)perl -F\\t -alne 'print if ($F[0]=~/ок$/ && $F[2]=~/^[мжс]о?$/ && $_!~/\tч/);' ../conv/z.tab
perl -ne 'print "$1 " if(/\tт:с\t/&&!/\tч/&&/^с:(\S+ок)\t/)' zaliz.adb
альпеншток артишок биоток блок бок брелок быстроток взволок водосток
водоток войлок волок восток гакблок грузопоток диплодок док дрок
дымоволок едок ездок зарок заскок заток знаток игрок изволок инок
исток кекуок кильблок клок клок кок лежебок лжепророк маниок медок
морок наволок наскок ничевок нок обморок оброк окорок оподельдок
опреснок отрок отскок отток пассажиропоток переволок перескок пищеблок
плимутрок подволок подскок подток полуобморок порок поскок поток
прискок приток причмок прок пророк проскок противоток проток прямоток
рок северо-восток седок скок смотрок сок соскок срок стеклоблок сток
ток ток ток трок урок флагшток фок футшток ходок чеглок челнок чеснок
шлакоблок шлафрок шок шток щёлок экивок электроток юго-восток

* Верно ли, что все существительные на "-Арь" имеют ударение по модели
"янвАрь - январЯ"?
(old)perl -F\\t -alne 'print if ($F[0]=~/арь$/ && ($F[1]==length($F[0])-2) && (($F[0]=~tr/[аеёиоуыэюя]/[аеёиоуыэюя]/)>1) && $F[2]=~/^[мжс]о?$/ && $F[3]!~/^2b$/);' ../conv/z.tab
perl -ne 'print "$1 " if(/\tт:с\t/&&/\tу1:b/&&/^с:(\S+арь)\t/)' zaliz.adb
адрес-календарь алтарь букварь бунтарь волгарь вратарь гвоздарь
главарь глухарь гнездарь грабарь дикарь дударь дымарь звонарь золотарь
инвентарь календарь ключарь кобзарь корчмарь косарь кубарь кустарь
ларь ложкарь лопарь мишарь носарь орарь пескарь плугарь полудикарь
пономарь почтарь псарь пушкарь рыбарь сазандарь свинарь секарь секарь
секретарь сизарь синаксарь скобарь словарь спортинвентарь
статс-секретарь стихарь сухарь сухарь тропарь фонарь царь чеботарь
чекмарь шинкарь штукарь январь янтарь

* Какие существительные на "-Аж" имеют ударение по модели "багАж - багажА"
и какие по модели "пейзАж - пейзАжа"?
(old)perl -F\\t -alne 'print if ($F[0]=~/аж$/ && ($F[1]==length($F[0])-1) && (($F[0]=~tr/[аеёиоуыэюя]/[аеёиоуыэюя]/)>1) && $F[2]=~/^[мжс]о?$/ && $F[3]!~/^4a$/);' ../conv/z.tab
(old)perl -F\\t -alne 'print if ($F[0]=~/аж$/ && ($F[1]==length($F[0])-1) && (($F[0]=~tr/[аеёиоуыэюя]/[аеёиоуыэюя]/)>1) && $F[2]=~/^[мжс]о?$/ && $F[3]!~/^4b$/);' ../conv/z.tab
(new)perl -ne 'print "$1 " if(/\tт:с\t/&&/\tу1:b/&&/^с:(\S+аж)\t/)' zaliz.adb
багаж бандаж блиндаж вираж витраж вольтаж гараж гидромонтаж зернофураж
камер-паж киномонтаж купаж кураж листаж литмонтаж литраж метраж мираж
монтаж паж подэтаж радиомонтаж саж сенаж сенофураж стеллаж сутаж типаж
тираж фотомонтаж фураж хлебофураж шантаж электромонтаж этаж
(new)perl -ne 'print "$1 " if(/\tт:с\t/&&/\tу1:a/&&/^с:(\S+аж)\t/)' zaliz.adb
абордаж авантаж ажиотаж антураж арбитраж аффинаж барраж бельэтаж
блокаж бракераж вернисаж вираж гренаж демонтаж дерапаж дренаж зондаж
инструктаж каботаж капотаж каптаж каротаж картонаж километраж
кинорепортаж кливаж корсаж кулаж куртаж лаж лекаж массаж метранпаж
мираж партстаж пассаж пастилаж патронаж пейзаж пеонаж персонаж пикетаж
пикотаж пилотаж плантаж плюмаж подхалимаж политипаж полуэкипаж примаж
променаж радиорепортаж раж резерваж репортаж саботаж саж стаж стаффаж
страж судоэкипаж такелаж тампонаж тоннаж тренаж трикотаж увраж фиксаж
фоторепортаж хронометраж шпионаж экипаж электромассаж эпатаж
эскамонтаж этикетаж

* Является ли слово "учИтель" с его мн. числом "учителЯ" исключением
или обычным явлением среди слов на "-тель"?
(old)perl -F\\t -alne 'print if ($F[0]=~/тель$/ && $F[2]=~/^[мжс]о?$/ && /\tос.*1/);' ../conv/z.tab
perl -ne 'print "$1 " if(/\tт:с\t/&&/\tос:1/&&/^с:(\S+тель)\t/)' zaliz.adb
китель учитель фухтель 

* Проверить "Кр.справочник по р.я.", 244:
ж.р. - 43%, м.р. - 40,5%, с.р. - 16%; н. - 78%, о. - 22%
(old)perl -F\\t -alne 'BEGIN{} $m++ if($F[2]=~/^мо?$/);$v++ if($F[2]=~/^жо?$/);$s++ if($F[2]=~/^со?$/);END{$a=$m+$v+$s;print "м:",int($m/$a*100)," ж:",int($v/$a*100)," с:",int($s/$a*100),"\n"}' ../conv/z.tab
(old)perl -F\\t -alne 'BEGIN{} $n++ if($F[2]=~/^[мжс]$/);$o++ if($F[2]=~/^[мжс]о$/);END{$a=$n+$o;print "н:",int($n/$a*100)," о:",int($o/$a*100),"\n"}' ../conv/z.tab
perl -ne 'BEGIN{} /\tр:(\S)(\S)/?($h{$1}++,$h{$2}++):/\tр:(\S)/?$h{$1}++:"";END{for(values %h){$a+=$_}for(keys %h){print "$_:",$h{$_}/$a*100,"% "}}' zaliz.adb
м:47% ж:38% с:14% о:1%
perl -ne 'BEGIN{} /\tт:с\t/?(/\tо:о/?$h{q/о/}++:$h{q/н/}++):"";END{for(values %h){$a+=$_}for(keys %h){print "$_:",$h{$_}/$a*100,"% "}}' zaliz.adb
н:75% о:25%

* print distribution of POS (print all POS):
(old)perl -ne 'print "$1\n" if (/\tpos:(\S+)/)' z.full | sort | uniq -c | sort -nr
(old)perl -ne '/\ts:([^\t]+)/&&(print "$1\n")' z.prop | sort -u
perl -ne 'BEGIN{} $h{$1}++ if(/\tт:(\S+)/);END{for(values %h){$a+=$_}for(sort {$h{$b}<=>$h{$a}} keys %h){printf "%s:%.3f%%\n",$_,$h{$_}/$a*100}}' zaliz.adb
с:47.668%
г:28.692%
п:21.101%
н:1.421%
предик:0.280%
межд:0.190%
предл:0.131%
част:0.113%
союз:0.089%
числ:0.068%
вводн:0.067%
мс-п:0.065%
мс:0.046%
числ-п:0.041%
сравн:0.028%

* Найти существительные с 8 и не -ь
(old)perl -F\\t -alne 'print $F[0] if ($F[3]=~/8/ && $F[2]=~/^[мжс]о?$/ && $F[0]!~/ь$/);' ../conv/z.tab
(old)беремя бремя время вымя знамя имя льносемя пламя племя полуимя семя стремя темя
perl -ne 'print "$1 " if(/\tт:с\t/&&/\tи:8/&&!/\tмн/&&/^с:(\S+[^ь])\t/)' zaliz.adb
беремя бремя время вымя знамя имя льносемя пламя племя полуимя семя стремя темя 

* print words with uniq accents:
(old)perl -alne 'print if (!$seen{$F[1]}++)' z.tab
perl -ne 'print "$1:$2 " if(/^с:(\S+).*\tу:(\S+)/&&!$seen{$2}++)' zaliz.adb
-де:3 -либо:5 -с:0 а:1 а-конто:4 аббатиса:6 аббревиатура:10
аббревиация:8 аберрационный:9 аблактировать:7 абстракционизм:12
авантюристический:11 авиабаза:6.1 авиабензин:9.1 авиагоризонт:10.1
авиадвигатель:7.1 авиадесант:8.1 авиаконструктор:11.1
австралопитек:12.6 австро-венгерский:12.1 автомобилестроение:15.8
автомотоклуб:11.6 авторефрижератор:13.1 автотрансформатор:14.1
ага-хан:6.3 агар-агар:8.3 агитбригада:9.3 агрометеорологический:15.1
адмиралтейств-коллегия:19.9 азооспермия:10.3 азотобактер:7.3
азотобактерин:12.3 азотсодержащий:11.3 аи:2 ай-ай-ай:7.4.1
акклиматизационный:14 актинотерапия:12.4 алюминотермия:12.5
ампер-час:8.4 анархо-синдикализм:16.3 анестезиологический:13
антиимпериалистический:16.1 антиинтеллектуализм:17.1
антропоморфология:14.5 антропоцентризм:13.5 армяно-григорианский:15.4
артериосклероз:13.4 артполк:5.1 архивохранилище:11.4 аудиенц-зал:10.5
аэрофотосъёмка:11.6.1 баиньки-баю:11.2 бай-бай:6.2 бальнеотерапия:13.2
баротермометр:9.2 баюшки-баю:10.2 бельфлёр-китайка:13.7 бензобак:7.2
бессрочноотпускной:17.6 бетономешалка:10.4 библиотековедение:12.8
бизань-мачта:9.4 биобиблиография:12.2 биокамера:5.2
благоприобретение:14.3 бледно-голубой:13.3 бом-брам-стеньга:12.7.2
бортмеханик:8.2 бронетранспортёр:15.3 быстрорастворимый:14.2
взаимопревращение:14.4 виктория-регия:11.5 витаминотерапия:14.6
внутризаводский:10.6 внутриклассовый:9.6 внутриотраслевой:15.6
внутричерепной:13.6 внутриядерный:7.6 воздухонепроницаемость:16.2
воздухораспределитель:17.2 восьмисотлетие:11.8 всего-навсего:8.5
высокопревосходительство:16.4 высокопреосвященство:15
гидрометаллургия:15.2 двадцатипятилетний:14.8
двадцатипятирублёвый:17.8 держидерево:7.5 доберман-пинчер:11.7
древневерхненемецкий:16.8 ей-ей:4.1 заготпункт:7.4
звуковоспроизведение:17.3 зигзаговидный:9.5 идефикс:5.3
интернационализация:16 интернационалистический:17 капиллярография:12.7
капилляроскопия:14.7 кислородсодержащий:15.7 коллоидообразование:16.5
конармия:4.2 ку-клукс-клан:12.6.2 легковоспламеняющийся:15.5
льномялка:6.4 мануфактур-коллегия:16.9 народно-демократический:17.4
национал-социалист:16.7 ого:3.1 пенициллинотерапия:17.9
портупей-юнкер:10.7 серо-буро-малиновый:14.7.2 стоустый:4.3
теплоэлектроцентраль:18.8 тра-та-та:9.6.3 тяжелораненый:8.6
ультракоротковолновый:15.10 фабрично-заводской:17.5 ча-ча-ча:8.5.2
четырехсотлетие:12.9 электрокардиографический:18.3
электронно-вычислительный:18 электронно-лучевой:17.7

* print words uniq wi:
(old)#perl -ne 'print substr($_,index($_,"\t",index($_,"\t")+1))' z.tab
(old)#perl -MEnglish -ne '/\t.*?\t/;print $POSTMATCH' z.tab
(old)#perl -F\\t -alne 'print substr($_,index($_,"\t".@F[2])+1)' z.tab
(old)#perl -F\\t -alne 'print join("\t",@F[2..$#F])' z.tab
(old)#perl -F\\t -alne 'print if (!$seen{join("\t",@F[2..$#F])}++)' z.tab
(old)perl -F\\t -alne '@F=grep(!/^c/,@F);print if (!$seen{join("\t",@F[2..$#F])}++)' z.tab | sort -k 3
(old)perl -F\\t -alne '@F=grep(!/^c/,@F);print $F[0] if (!$seen{join("\t",@F[2..$#F])}++)' z.tab > z.wi.uniq
perl -ne 's/\t([узфв]|гпр|искл|слсч|с2ч|сб|мн:)[^\t]*//g; print "$1 " if(/^с:(\S+)(.*)/&&!$seen{$2}++)' zaliz.adb
-де а а а а-ля аба абажур абажурный абазин абазинец абазинка
абазинский абак абака аббат аббатиса аббатство аббревиация абзац
абиетиновый аблактировать аблактировка абонирование абонироваться
абордаж абортарий абрек абсолютность аваль аванложа авансом авар
авгиев августейший авеню авианосец авиапромышленный авиастроитель
авось авралить автовесы автогонки автоинспектор автокружок автоматчица
автопоезд авторизованный авторские авторулевой автосани ага агами
агарянин агитаторша агитировать агонизировать аграрий агути ад адажио
адамсия азартничать азотобактер азотобактерия аистёнок айканье айкнуть
аккуратненький акриды актёришка акулий акцизный аленький алкать аллея
алтей алтын альпага альплагерь амба амбаришко амбарище амнистированный
анальгин ангелок ангстрем антигосударственный античастица антука апаш
апикальный аппаратная арестантская арестованная арестовать
арестовывать арканить артполк архивохранилище архиерей ауспиции афгани
ахи ахнуть ахтерштевень баба-яга бабуля багор багреный бадья баз баки
баклуши балаболка балда баловень балык балычок баня барахлишко барахло
бархатцы барышня басня бастующий батист батя бачки баять бдеть бебе
бег бега беглец бегунки бегунья бедняга бедро бездарь безматерний
белена белила белить белолицый белуга белые белые бельецо бельишко
бенгали берег бережок беремя беречь беречься бери-бери бёрце берцо
бесить беспозвоночное бесчестить бибабо бивать бить биться бичевать
благо благоприобретенный благословить благословиться блаженненький
блёкнуть блесна блеять ближний близкие блудни блюсти бобёр бобёр
бодяга божество бой бок болванчик более болотце бонза бороться борт
ботинки бочок братоубийца брать браться брег бред бредиться бремя
брести бриджи брить бриться бровь брызгаться брызги брюзгнуть брюхо
брюшко бубна бубны будущее букли бульдожка бургонское бухнуть
бухты-барахты бывалый быть бычище вагон-ресторан вайшья вальцевать
ванька-встанька вахтенный ваш вбежать вбить вбросать вбухаться ввезти
ввергнуть ввергнуться ввернуть вверстать ввертеть ввести ввинтить
вволочь ввязать ввязаться ввязнуть вгрызться вдаваться вдаться вдеть
вдеться вдуть ведёрце ведренеть ведущая везти везти велеть велорикша
венчать венчаться веретено верстать вертеть вёрткий верх верхний
верховье верша вес весёлый вести вестись весь ветер ветер вжать
вжаться вжиться взбесить взбиться взбрести взбунтоваться взбухнуть
взбучить взвыть взглянуться взгорбить взгорбиться вздуматься
взлупцевать взмести взметать взнести взнестись взобраться взодрать
взойти взорваться взрасти взъехать взять взяться визави виктория-регия
винтить вития вколоть вколоться вкрасться влечь влечься влюблённый
влюблённый влюблённый вмять вмяться внучата внять вовлечь вовлечься
вогнать водолей возбудить возвратить возвратиться воздавать
воздаваться воздать воздаться воздвигнуть возжечь возжечься
возлюбленный возмочь возроптать войска волочь волочься воробей ворожея
воронко воротища воротца восемнадцатый восемнадцать воспринять вошь
впереть впереться вплестись впрясть впрячь вруша все всколыхать
всколыхаться всполье встопорщить встопорщиться всякий второе входящая
выбить выбиться выбрести выбуравить выбучить выведрить вывезти вывести
вывялиться выглодать выгрести выгрестись выгрызть выдвинуть
выдвинуться выжать выжать выжаться выжить выкашлянуть выкашлянуться
выкинуть выкинуться выклеиться выкликать вылезти вылезть вымазать
вымазаться вымереть вымерить вымести выместись вымучить вынести
вынестись выпасти выпереть выпечься выплакаться выплескаться
выполоскать выполоскаться вырвать выспренний выстелить выстыть
вытрястись выцвести галдёж галифе гащивать генри герц гинуть глаз
глаза глазище глодать глохнуть глубь глухая глухой глушить гнести
гнильца гной гнуть год голосина голошеий горбиться горе горсть
господень господин грабли гравий грести громить грудь грунт грызть
грызться грязнуля грясти губить губка гуля далёкий данный девичья
девчата дёготь дедуля дежа детишки детище диетсестра дитя дитятко
добыть довестись догрести дожевать дожить долить домашние домерить
домучиться допереть доскрестись доцвести дрейфить дреколья дрематься
дрогнуть дружить дупель дым дышать дышаться его единица ёж есть жар
жать жать жаться желна жёлоб жёлудь жемчуг женить жениться женоубийца
жеребей жеребок жерех жертва жир жить житье-бытьё житься жулябия
забрызгаться забытьё завещать завянуть задразнить зажить зажить зайти
заклать заключённый замереть замолаживать замяться запереть запереться
запить заплескать заснять затвердить захотеться зеленя зоб зуммерить
зюзя идолище идтись изваять изжечь изжечься изостлать имбирь иной
исподнее ихний кабельтов казнить каков камаринский каналья
кафе-закусочная килопарсек кишмиш клеветать клей клеймёный клепать
клёст княжна кое-какой кое-кто козырь кой колесико колоть колыхать
коняга корча коты край край край крестить креститься кросна кружевца
крюк кумжа курлыкать ладо лакомить лёд лежать лён лепиться леса лёт
лечь ликёрец линчевать лихорадить лицо лоб лог ложь лужок лютня
магараджа мазло мазло малолетняя маслёнок мёд мель мереть мерить
мериться мёртвый метеоусловия мех млекопитающее мозг молодожёны мох
мочь мястись мяться наволочь навь надавать найти належать напечь
наречённый народишко наручни начать недостать недоучесть нелюди
неровня нести нестись никой никоторый ничей новенький ножницы облако
облачко облить обмереть обнять обняться обозвать обои обой обрыднуть
обсудить обчесться объехать объять овца один один один ожить
оклеветать окружающие определённый осведомить остриё отпереть
отпереться пар пасти пастись пепел перёд передняя перемереть перенять
переть персонаж петься пилидий письмена плац плескать плестись плечи
плутни побыть повезти повставать поглотить подвигнуть подёрнуть
подмастерье подследственный пол-листа пол-одиннадцатого полоскать
полоскаться полудурье полутёмный почать прелиминарии прибыть
привестись привидение прилипало прислонить прислониться проклясть
прочий прясть псина пустомеля путь пяльцы размазня разогнаться
разостлаться разъехаться рассвести расстелиться расти рвать ров
родители родить рой сам сапог сахарить свистящий сводня своё свой сей
сердечкин сесть сивка-бурка скрестись смеркнуться снег соболь
созданьице сок соловейко спрясть стега стелить стелиться стог сторож
сторож страшило страшило стричь стыть супруги тары-бары терпеть тётя
толстошея трепло третий третий третье тридевять турок тяготить
тяготиться уголок хиротонисать хлев ценить цех чей чёлн черевичек
честь членистоногое чукча чухна шёлк щёлочь

* почему появляются исключения и особые случаи?
если в каком-то падеже словоформа совпадает с другим словом,
то эта словоформа меняется (?), например:
имя:имён, семя:семён->семян
но слово "семя" не должно содержать признак "ё", потому что семя->сёменем

Составить список словоформ, где не учитываются особые случаи:
семЯн - семЕн
хОчешь - хотИшь

т.е. как влияют дополнительные особенности на словоизменение

<h2>Влияние дополнительных особенностей на словоизменение</h2>
<h2>Влияние исключений на словоизменение</h2>



** find all encodings (very good!) !!!

(old) perl -e 'while(<>){map{/^([^:]+):(.*)/&&($1!~/^(w|exc|к|сл|фк|фр|гпр|a)$/)&&($w->{$1}->{$2}++)}split/\t/};use Data::Dumper;print Dumper($w);' z.prop
perl -e 'while(<>){chomp;map{/^([^:]+):(.*)/&&($1!~/^(w|exc|к|сл|фк|фр|гпр|a)$/)&&($w2->{$1}->{$2}++);/^([^:]+)/&&($w1->{$1}++)}split/\t/};use Data::Dumper;print Dumper($w1,$w2)' z.adb

** very fast

perl -lne 'print if/\ts:п/&&/\tч/' z.adb
perl -lne 'print if/\ts2?:мс/' z.adb
perl -lne 'print $1 if/\tгв:св-нсв/&&/w:([^\t]+)/' z.adb
perl -lne 'print $1 if/\tгв:св-нсв/&&/w:([^\t]+)/' z.adb | grep -Ff - test_inflect.pl

perl -lne 'print $1 if/\ts:п/&&/\tу1:b/&&/w:([^\t]+)/' z.adb | grep -Ff - test_inflect.pl
perl -lne 'print "$1" if/\ts:п/&&/\tу1:b/&&/w:[^\t]+([^\t]{2})/' z.adb | sort -u

perl -lne 'print $1 if/\tу1:b1/&&/\tч/&&/w:([^\t]+)/' z.adb
вошь ложь любовь нелюбовь рожь

perl -lne 'print if/\ts2?:мс/&&/\texc/' z.adb

** very slow

(new)perl -lne '%w=map{/(.*):(.*)/?($1,$2):""}split/\t/;print if($w{q/с/}=~/проба/)' zaliz.adb
(old)perl -lne '%w=map{/(.*):(.*)/?($1,$2):""}split/\t/;print if($w{'w'}=~/проба/)' z.prop

** print word from test data with these properties

perl -lne '/ос:9/&&/чё/&&/w:(\S+)/&&print $1' z.prop | grep -f - ../test_inflect.pl

perl -lne '/гв:св-нсв/&&/w:(\S+)/&&print $1' z.prop | grep -f - ../test_inflect.pl
grep "св-нсв" z | cut -d " " -f 1 | grep -f - ../test_inflect.pl &


** useful

perl -lne 'exit if/^%%/;my%x;s/^\S+ //;map{$x{$_}=1}split(/[:\/]/);print join(":",sort keys%x)' zp | sort | uniq -c | sort -nr

** find if words with exceptions cover whole corresponding paradigm

perl -lne 'print "w:$1	" if/\texc/&&/w:([^\t]+)/' z.adb | grep -Ff - rus.adb | perl -lne 'print "$1" if/i:([^\t]+)/' | sort | uniq -c | sort -nr | perl -alne 'print "$F[1] $F[0]"' | sort -n > i1
perl -lne 'print "w:$1	" if/\texc/&&/w:([^\t]+)/' z.adb | grep -Ff - rus.adb | perl -lne 'print "i:$1	" if/i:([^\t]+)/' | grep -Ff - rus.adb | perl -lne 'print "$1" if/i:([^\t]+)/' | sort | uniq -c | sort -nr | perl -alne 'print "$F[1] $F[0]"' | sort -n > i2
grep -xFf i1 i2 > i12
grep -xFf i2 i1 > i21
note that i12 and i21 will be the same


* Examples

** Example of z.db:

а: 0
аб: 1
абажур: 2

** Example of z.tab.accented:

А	союз	[i(0),c('без удар.')]
А	част	i(0)
А	межд	i(0)
А	с	[i(0),c('название буквы а')]
абА	ж	[i(1,b),p([с(_,м)])]
абажУр	м	i(1,a)
абажУрный	п	[i(1,a),ч]



qv /dos/c/cd/cd29/doc/ling/rus/speakrus/uspens1.htm



найти рифмы к "розы" - "морозы"
искать "розы$" по всем словоформам


* from conv/ARCHITEC:

* General architecture (move to comments of Makefile or README)

/dos/d/doc/ling/rus/zaliz/starling/dict/z_*
        cp866 -> koi8
z.orig
        subpatch
z
        z2adb.pl
z.adb
        z2suf.pl

rus.adb (associative database) + rus.suf (suffixes) + rus.acc (accents)

        ??? + ??? + ???

# rus.prp (rus.dic,rus.tab) + rus.suf (comma-separated,tree)
# rus.prp + rus.aff.pl (HASH)
# rus.db + rus.aff.pl
# rus.db + rus.c

rus.suf -> suf2hash.pl -> rushash.pl (HASH)
rus.suf -> suf2c.pl -> rus.c
rus.suf -> suf2db2.pl -> russuf.db
rus.adb -> adb2db2.pl -> rus.db

priparad.pl - print paradigm

** Old Files:

*** ./old/ppsplit.pl

Postprocessor that splits paradigms to smaller parts. Example:

from:
3	5310	ть;л;ла;ло;ли;ю;ешь;ет;ем;ете;ют;-;-;-;-;-;-;й;йте;я;в,вши;ющий;ющего;ющему;ющий;ющего;ющим;ющем;ющая;ющей;ющей;ющую;ющую;ющей,ющею;ющей;ющее;ющего;ющему;ющее;ющее;ющим;ющем;ющие;ющих;ющим;ющие;ющих;ющими;ющих;-;-;-;-;вший;вшего;вшему;вший;вшего;вшим;вшем;вшая;вшей;вшей;вшую;вшую;вшей,вшею;вшей;вшее;вшего;вшему;вшее;вшее;вшим;вшем;вшие;вших;вшим;вшие;вших;вшими;вших;-;-;-;-;емый;емого;емому;емый;емого;емым;емом;емая;емой;емой;емую;емую;емой,емою;емой;емое;емого;емому;емое;емое;емым;емом;емые;емых;емым;емые;емых;емыми;емых;ем;ема;емо;емы;-;-;-;-;-;-;-;-;-;-;-;-;-;-;-;-;-;-;-;-;-;-;-;-;-;-;-;-;-;-;-;-
makes next paradigms:
5	18487	ть;л;ла;ло;ли
6	12128	ю;ешь;ет;ем;ете;ют
7	28497	;;;;;
8	6991	й;йте;я;в,вши
9	29787	ий;его;ему;ий;его;им;ем;ая;ей;ей;ую;ую;ей,ею;ей;ее;его;ему;ее;ее;им;ем;ие;их;им;ие;их;ими;их
10	93092	;;;
11	14470	;а;о;ы
12	52486	;;;;;;;;;;;;;;;;;;;;;;;;;;;

*** ./old/suf2hash.pl

Generates big Perl hash which represent word stems tree. Example:

$VAR1 = {
          'ю' => {
                   '*' => [ [ 3, 6 ] ],
                   'о' => {
                            'м' => { 'е' => { '*' => [ [ 3, 98 ] ] } },
                            'н' => { '*' => [ [ 2, 14 ] ] }
                          }
                 },
          'а' => {
                   '*' => [ [ 1, 2 ] ],
                   'л' => { '*' => [ [ 3, 3 ] ] },
                 },
          'е' => {
                   'ы' => {
                            'м' => { 'е' => { '*' => [ [ 3, 107 ], [ 3, 111 ] ] } },
                            'н' => { '*' => [ [ 2, 22 ], [ 2, 25 ] ] }
                          },
                   '*' => [ [ 1, 6 ] ],
                   'т' => {
                            'й' => { '*' => [ [ 3, 19 ] ] },
                            'е' => { '*' => [ [ 3, 10 ] ] }
                          },
                 },
          'т' => {
                   'ю' => { '*' => [ [ 3, 11 ] ] },
                   'е' => { '*' => [ [ 3, 8 ] ] } },
        };


But such hash is too big and requires too much memory and time to read.

*** ./old/sufsort.pl

Sorts all suffixes from rus.suf by their frequency.
Output is used by ./old/suf2switch.pl

*** ./old/suf2switch.pl

Generates big C switch statements for parsing word stem trees.

Example of output (librustree.h):

switch(ch){
case'а':WI(0001);NEXT_CH;switch(ch){
case'н':WI(0001);NEXT_CH;switch(ch){
case'ь':WI(0001);break;
case'а':WI(0001);NEXT_CH;switch(ch){
case'в':WI(0001);NEXT_CH;switch(ch){
case'о':WI(0001);break;
case'ё':WI(0001);break;

But such switches are too big and require about 100MB memory to compile.

*** ./old/suf2y.pl

Generates YACC/BISON grammar rules for parsing word stems,
but result grammar can't be processed by bison, because number of states
is too big (more than 32768), which can be seen in the generated tab.c:

static const short yyprhs[] = {     0,
     0,     3,     6,     9,    12,    15,    18,    21,    24,    27,
    30,    33,    36,    39,    42,    45,    48,    51,    54,    57,
.....
 32746, 32747, 32748, 32751, 32754, 32757, 32760, 32763, 32766,-32767,
-32764,-32761,-32758,-32755,-32752,-32749,-32746,-32743,-32740,-32737,
.....
-17236,-17233,-17230,-17229,-17226,-17223,-17220,-17217,-17214,-17213,
-17212,-17211,-17208,-17207,-17204,-17201,-17198,-17195
};

Overflow appears in file reader.c in line "rrhs[ruleno] = itemno;".

Example of output of suf2y.pl:

:'а'a|'у'u|'м'm|'е'e|'ы'y|'в'w|'и'i|'х'h|'й'j|'о'o|'я'q|'ю'_3|'н'n|'ь'x|'л'l|'т't|'к'k|'ц'c|'ё'_6|'г'g|'р'r|'с's|'б'b|'ж'v|'з'z|'д'd;
a:'н'an|'л'al|'м'am|'к'ak|'ц'ac|'т'at|'г'ag|'х'ah|'ч'a4|'ж'av|'р'ar|'в'aw|'щ'a2|'с'as|'з'az|'д'ad|'ш'a1|'б'ab;
an:'ь'|'а'ana|'е'ane|'й'|'и'ani|'я'|'с'ans|'н'ann|'в'anw|'ё'|'л'anl|'р'anr|'о'|'м'anm|'г'ang;
ana:'в'anaw|'з'|'с'anas|'т'anat|'р'anar|'к'anak|'х'anah|'п'anap|'л'anal|'н'anan|'г'anag|'д'anad|'б'anab|'ж'anav|'м'anam;
anaw:'о'|'ё'|'е'|'з'anawz;
anawz:'о';
anas:'ё';
anat:'ё'|'с'anats|'п'anatp;
anats:'р'anatsr|'ё';
anatsr:'ё';

Template for grammar file is in file ./old/librustree.y.

* encodings (wi)

w:агент	a:3	b:5	i:12	j:5	s:с	к:лицо	о:о	р:м
->
агент:12,

0
        0 - существительное
        1 - не существительное
1
        0 - глагол
        1 - не глагол
2
        0 - прилагательное
        1 - не прилагательное
3
4
5
6
7
8

существительное (7 бит)
род: мужской женский средний (общий, если биты 123 = 0)
1
        мужской
2
        женский
3
        средний
4
        неодуш
5
        одуш
6
        число ед./мн.
7

глагол (6 бит)
св-нсв
2
        совершенный
3
        несовершенный
4
        1 - непереходный, 0 - переходный (0 - непереходный, 1 - переходный)
5
        гбл (безл)
6
        гмн (многокр)
7

прилагательное (5 бит)
3
        притяжательные - 'п'
4
        местоименные - 'мс-п'
5
        'числ-п'
6
        'мс'
7
        'числ'

остальные (несклоняемые) части речи (4 бита)
        вводн
        межд
        предик
        предл
        союз
        част
        н
        сравн

from agama:
0x01:   01010
        01011
        01100
        01101
        01110
0x06:   01111

0x07:   110010
        110001
        110011
0x0D:   101010
        101001
        101011
0x10:   100110
        100101
        100111
        100010
0x14:   100001
0x15:   110110
0x16:   110101
0x17:   101110
0x18:   1000101

{
          'о' => {
                   'но' => 86,
                   'н' => 56,
                   'о' => 12188
                 },
          'р' => {
                   'мс' => 7,
                   'см' => 15,
                   'жс' => 1,
                   'сж' => 1,
                   'мж' => 30,
                   'с' => 6312,
                   'м' => 21537,
                   'ж' => 17917,
                   'о' => 406
                 },
          's' => {
                   'мс' => 13,
                   'п' => 20507,
                   'числ-п' => 39,
                   'с' => 46256,
                   'числ' => 66,
                   'част' => 109,
                   'г' => 27830,
                   'предл' => 126,
                   'сравн' => 27,
                   'союз' => 87,
                   'межд' => 185,
                   'мс-п' => 43,
                   'н' => 1381,
                   'вводн' => 66,
                   'предик' => 271
                 },
          's2' => {
                    'п' => 904,
                    'мс' => 332,
                    'мс-п' => 2,
                    'ч' => 65
                  },
          'гп' => {
                    'п' => 15102,
                    'нп' => 12728
                  },
          'гв' => {
                    'нсв' => 12582,
                    'св' => 14372,
                    'св-нсв' => 876
                  },
}

* encodings (wf) - NOT NEEDED

*падеж(3) - и р д в т п р2 п2
*число(1) - е м
*род(2) - м ж с
*одушевлённость(1) - н о
*форма прилагательного(1) - п к
сравнительная степень(1) - 0 1
форма глагола(2) - и ! д ч
*время(2) - п н б
лицо(2) - 1 2 3
*залог(1) - д с


* from conv/PROPLIST:

* List of word properties

	a	ударение
        b       основа (общая часть всех словоформ)
искл	exc	исключение для морфологически нерегулярных форм
        i       код типа склонения (спряжения) слова, индекс суффиксов
        j       код типа ударения, индекс ударений
фн	n	формы нет
фп	p	форма предположительна
p?	s	часть речи
p2?	s2	часть речи морфологическая (тип склонения)
в	v	вариант
	w	слово
фз	z	форма затруднительна
vnp	гбл	безличный глагол
vt?	гв	вид глагола
vp	гмн	многократный глагол
vt?	гп	переходность глагола
vo	гпр	глагол противоположного вида
	гпс	чередование в страдательном причастии глагола
	до	дополнительные особенности в склонении
	и	тип склонения/спряжения (индекс)
s	к	указания значения
s2	к2	указания значения дополнительные
s3	к3	сведения о вариантах слова
pl	мн	множественное число
t?	о	одушевленность
	ос	отклонения от стандартного склонения (особенности склонения)
	осф	факультативные отклонения от стандартного склонения
	п2	2-й предложный падеж
	п2ф	2-й предложный падеж факультативный
g	р	род
	р2	2-й родительный падеж
	рм	род морфологический
	сл	слово употребляется только в приводимых словосочетаниях
	у1	схема ударения, основное ударение
	у2	схема ударения, дополнительное ударение
fk	фк	факультативная часть индекса
fr	фр	фразеологизм
	ч	чередование беглой гласной с нулём
	ч2	определённые чередования
	ч3	прочие чередования
	чё	чередование ё/е
	чо	чередование о/е


(w|exc|к|сл|фк|фр|гпр|a)

	ч3	другие чередования
		б с т д им ст г к щ м н
	у1	основное ударение
		a a1 b b1 c c1 d d1 e f f1 f2
	у2	дополнительное ударение
		b b1 c c1 c2
	ос	отклонения от стандартного склонения
		1 2 3 4 6 7 8 9 12 47 56
	осф	факультативные отклонения от стандартного склонения
		1 2 3 4 5 6 7 8 9 37 56
	до	дополнительные особенности в склонении
		1..18
	п2	2-й предложный падеж
		- в во на
	п2ф	2-й предложный падеж факультативный
		- в на
	мн
		от
	гпс	чередование у страдательного причастия глагола
		жд
	гв
		нсв св св-нсв
	гп	переходность
		п нп
	z
		^.. ^!.. ^.м ^рм ^к ^к.ем ^к.ем|^к.еж ^к.еж ^к|^с ^с
		^!..|^б1е|^чпс ^б1е|^чпс ^б1е ^н1е ^н1е|^чпс ^дн|^чпс ^дн ^чнс ^чпс
	p
		.м к.ем
	n
		^.. ^рм ^к.ем ^к.ем|^с ^к|^с ^п ^п|^с ^с
		^б.. ^б1е ^б..|^чпс ^дн ^н1е|^чпс ^чпд ^чпс ^ч.с
	s	часть речи
		с п г мс мс-п числ числ-п н
		вводн межд предик предл союз сравн част
	s2	часть речи морфологическая (bad name) (т.е. тип склонения)
		п мс мс-п ч
	р	грамматический род
		м ж с о мж мс см жс сж
	рм
		ж с
	о	одушевленность
		н о но
	и	индекс
		0..16
	к2
	к3

	v	варианты
		1 2 3

** Primary (morphology?)

	мн(от)	???

	ч	чередование беглой гласной с нулём
	ч2	определённые чередования

	м($chr)	морф. характеристика

	чо	чередование о/е
	чё	чередование ё/е

	р2	2-й родительный падеж

	p([пк(_,м)])	форма предположительна ???
	p([с(_,м)])	форма предположительна ???


** Secondary (semantics?)

w	сл	слово
a	уд	ударение

pos	ч (чр)	часть речи
pm	чм	часть речи морфологическая
g	р	грамматический род

an	о	одушевленность

	св	вид глагола

i		индекс
a1		тип ударения

** rus.adb


* from conv/README.txt:

* Акцентуация

  #  абажур 5                 5              e   абажу'р
  #  аистенок 5,5             e(5)           E   аистёнок
  #  агитбригада 9.3          a(9,3)         ic  аги`тбрига'да
  #  впередсмотрящий 12.5,5   a(12,e(5))     lE  вперёдсмотря'щий
  #  светло-зеленый 11,11.3   a(e(11),3)     Kc  све`тло-зелёный
  #  темно-зеленый 10,10.2,2  a(e(10),e(2))  JB  тёмно-зелёный
  #  серо-буро-малиновый 14.7 a(14,7,2) ???  ngb се`ро-бу`ро-мали'новый ???

где e, E, ic, lE - буквы, порядковый номер которых в алфавите
                   численно равен позиции ударения в слове

* Examples

** Example of z.pl:

w(а,1,союз,[i(0),c('без удар.')]).
w(а,1,част,i(0)).
w(а,1,межд,i(0)).
w(а,1,с,[i(0),c('название буквы а')]).
w(аба,3,ж,[i(1,b),p([с(_,м)])]).
w(абажур,5,м,i(1,a)).
w(абажурный,5,п,[i(1,a),ч]).
w(абонировать,5,'св-нсв',i(2,a)).

* fun

В Грамматическом словаре стал искать слово "эхо",
увидел наверху страницы "ЕСНО" и стал смотреть на этой странице

** funny file name

priparad
z.parad
