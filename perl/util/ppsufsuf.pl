#!/usr/bin/perl -w
# -*- mode: Perl; coding: cyrillic-koi8; -*-
# $Id$
# Copyright (c) 2000  Juri Linkov <juri@eta.org>
# This file is distributed under the terms of the GNU GPL.

# ppsufstat.pl - postprocessor that prints statistics for suffixes

# perl ppsufsuf.pl

use strict;
use vars qw($s $sbn $bsn %ws %bs $pnb %pcb %ss $pns %pcs);

%ws = (
      12 => ["[ьоеёая]|[ыои]й|[ое]е|[ая]я",
             "[аяыи]|[ое]го|[ое]й",
             "[уюеи]|[ое]му|[ое]й",
             "[ую]|[ую]ю|[ьоеёая]|[ыои]й|[ое]е|[ая]я|[аяыи]|[ое]го|[ое]й",
             "[оеё]м|[оеё][йю]|[ыи]м|ью",
             "[еи]|[ое][мй]",
             "[ыиая]|[ыи]е",
             "[оеё]в|ей|[ьй]|[ыи]х",
             "[аяыи]м",
             "[ую]ю|[ыиая]|[ыи]е|ов|ей|ь|[ыи]х",
             "[аяыи]ми",
             "[аяыи]х"],
      28 => ["[ыои]й","[ое]го","[ое]му","[ыои]й","[ое]го","[ыи]м"   ,"[ое]м",
             "[ая]я" ,"[ое]й" ,"[ое]й" ,"[ую]ю" ,"[ую]ю" ,"[ое][йю]","[ое]й",
             "[ое]е" ,"[ое]го","[ое]му","[ое]е" ,"[ое]е" ,"[ыи]м"   ,"[ое]м",
             "[ыи]е" ,"[ыи]х" ,"[ыи]м" ,"[ыи]е" ,"[ыи]х" ,"[ыи]ми"  ,"[ыи]х",
             ],
      33 => ["[ыои]й","[ое]го","[ое]му","[ыои]й","[ое]го","[ыи]м"   ,"[ое]м",
             "[ая]я" ,"[ое]й" ,"[ое]й" ,"[ую]ю" ,"[ую]ю" ,"[ое][йю]","[ое]й",
             "[ое]е" ,"[ое]го","[ое]му","[ое]е" ,"[ое]е" ,"[ыи]м"   ,"[ое]м",
             "[ыи]е" ,"[ыи]х" ,"[ыи]м" ,"[ыи]е" ,"[ыи]х" ,"[ыи]ми"  ,"[ыи]х",
             "[ьй]","[ая]","[оеё]","[ыи]","е[ей]"
             ],
      149 => ["[тч][ьи]",
              "л","ла","ло","ли",
              "[ую]","[еёи]шь","[еёи]т","[еёи]м","[еёи]те","[уюяа]т",
              "[ую]","[еёи]шь","[еёи]т","[еёи]м","[еёи]те","[уюяа]т",
              "[ийь]","[ийь]те","[яа]","вши|в",

              "[уюяа]щий","[уюяа]щего","[уюяа]щему","[уюяа]щий","[уюяа]щего","[уюяа]щим"   ,"[уюяа]щем",
              "[уюяа]щая","[уюяа]щей" ,"[уюяа]щей" ,"[уюяа]щую","[уюяа]щую" ,"[уюяа]ще[йю]","[уюяа]щей",
              "[уюяа]щее","[уюяа]щего","[уюяа]щему","[уюяа]щее","[уюяа]щее" ,"[уюяа]щим"   ,"[уюяа]щем",
              "[уюяа]щие","[уюяа]щих" ,"[уюяа]щим" ,"[уюяа]щие","[уюяа]щих" ,"[уюяа]щими"  ,"[уюяа]щих",
              "[уюяа]щ","[уюяа]ща","[уюяа]ще","[уюяа]щи",

              "в?ший","в?шего","в?шему","в?ший","в?шего","в?шим"   ,"в?шем",
              "в?шая","в?шей" ,"в?шей" ,"в?шую","в?шую" ,"в?ше[йю]","в?шей",
              "в?шее","в?шего","в?шему","в?шее","в?шее" ,"в?шим"   ,"в?шем",
              "в?шие","в?ших" ,"в?шим" ,"в?шие","в?ших" ,"в?шими"  ,"в?ших",
              "в?ш","в?ша","в?ше","в?ши",

              "[еёои]мый","[еёои]мого","[еёои]мому","[еёои]мый","[еёои]мого","[еёои]мым"   ,"[еёои]мом",
              "[еёои]мая","[еёои]мой" ,"[еёои]мой" ,"[еёои]мую","[еёои]мую" ,"[еёои]мо[йю]","[еёои]мой",
              "[еёои]мое","[еёои]мого","[еёои]мому","[еёои]мое","[еёои]мое" ,"[еёои]мым"   ,"[еёои]мом",
              "[еёои]мые","[еёои]мых" ,"[еёои]мым" ,"[еёои]мые","[еёои]мых" ,"[еёои]мыми"  ,"[еёои]мых",
              "[еёои]м","[еёои]ма","[еёои]мо","[еёои]мы",

              "н?[нт]ый","н?[нт]ого","н?[нт]ому","н?[нт]ый","н?[нт]ого","н?[нт]ым"   ,"н?[нт]ом",
              "н?[нт]ая","н?[нт]ой" ,"н?[нт]ой" ,"н?[нт]ую","н?[нт]ую" ,"н?[нт]о[йю]","н?[нт]ой",
              "н?[нт]ое","н?[нт]ого","н?[нт]ому","н?[нт]ое","н?[нт]ое" ,"н?[нт]ым"   ,"н?[нт]ом",
              "н?[нт]ые","н?[нт]ых" ,"н?[нт]ым" ,"н?[нт]ые","н?[нт]ых" ,"н?[нт]ыми"  ,"н?[нт]ых",
              "н?[нт]","н?[нт]а","н?[нт]о","н?[нт]ы",
              ]
);

open(SUF,"<rus.suf");
open(SUF1,">rus.suf1");
open(SUF2,">rus.suf2");
open(SUF3,">rus.suf3");
open(SUF4,">rus.suf4");
open(SUF5,">rus.suf5");
open(SUF6,">rus.suf6");

my ($pnb, $pns) = (0, 0);

while (<SUF>) {
  chomp;
  my ($n, $c, $p) = split /\t/;
  my $cnt = ($p =~ tr/;/;/) + 1;
  my $i = -1;
  my %bc;

  print SUF1 "$n\t$c\t", (join ";", map {
    $i++;
    join ",", map {
      # s/\(.*\)//; s/\[.*\]//; s/[*?]$//; s/с[яь]$//;
      my $bak = "";
      s/[\(\[*?&].*$// && ($bak = $&);
      s/с[яь]$// && ($bak = "$&$bak");
      my ($b,$s) = ($_,"");
      if (defined $ws{$cnt}->[$i] && /($ws{$cnt}->[$i])$/) { ($b,$s) = ($`,$&) }
      if (!defined $bs{$b}) { $bs{$b} = ($pnb==12&&++$pnb,++$pnb) }
      $pcb{$bs{$b}} += $c;
      if (!defined $ss{$s}) { $ss{$s} = ($pns==12&&++$pns,++$pns) }
      $pcs{$ss{$s}} += $c;
      $sbn->{$s}->{$b}->{$n}++;
      $bsn->{$b}->{$s}->{$n}++;
      $bc{$b}++;
      ($b ne "" ? "$bs{$b}-" : "") . "$ss{$s}$bak";
    } ($_ ? split(/,/,$_,-1) : ($_));
  } (split(/;/,$p,-1))), "\n";
  map { print SUF4 "$_:$bc{$_} "} sort {$bc{$a} <=> $bc{$b}} (keys(%bc));
  print SUF4 "\n";
}

map { print SUF2 "$bs{$_}\t$pcb{$bs{$_}}\t$_\n" } sort {$pcb{$bs{$b}} <=> $pcb{$bs{$a}} || $bs{$a} <=> $bs{$b}} (keys(%bs));
map { print SUF3 "$ss{$_}\t$pcs{$ss{$_}}\t$_\n" } sort {$pcs{$ss{$b}} <=> $pcs{$ss{$a}} || $ss{$a} <=> $ss{$b}} (keys(%ss));

use Data::Dumper;
print SUF5 Dumper(\$sbn);
print SUF6 Dumper(\$bsn);




