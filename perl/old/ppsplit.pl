#!/usr/bin/perl -w
# -*- mode: Perl; coding: cyrillic-koi8; -*-
# $Id$
# Copyright (c) 2000  Juri Linkov <juri@eta.org>
# This file is distributed under the terms of the GNU GPL.

# ppsplit.pl - postprocessor that splits paradigms to smaller parts

# perl ppsplit.pl

# problem of backreferences
# perl -e 'print join("/",("abcdef"=~/((.){5})/))'

use strict;
use vars qw($s %conv %sufs %pcs $pns);

use Data::Dumper;

open(ADB,"<rus.adb");
open(SUF,"<rus.suf");
open(ACC,"<rus.acc");
open(ADB2,">rus2.adb");
open(SUF2,">rus2.suf");
open(ACC2,">rus2.acc");

while (<SUF>) {
  chomp;
  my ($n, $c, $p) = split /\t/;
  $p =~ s/[^\t;,]*\#/-/g;
  while($p =~ s/-,-/-/g){};
  while($p =~ s/,-//g){};
  while($p =~ s/-,//g){};
  my $cnt = $p =~ tr/;/;/;
#    print "$cnt: $p\n";

  $conv{$n} =
  [map {

    my ($base) = (/;([^,;?*.()]+);/);
    if (!$base) { $base = "" }
#      print "$base\n";

    map {
      map {
        while ($_ !~ /^$base/) { $base =~ s/.$// }
      } $_ ? split(/,/,$_,-1) : ($_);
    } split(/;/,$_,-1);

    s/(^|;|,)$base/$1/g;
    s/([^;,]+),\1;/;/g;

    if (!defined $sufs{$_}) { $sufs{$_} = ($pns==12&&++$pns,++$pns) }
    $pcs{$sufs{$_}}+=$c;
    $sufs{$_}
  }
#     ($cnt == 11)  ? ($p=~/([^;]*(?:;[^;]*){5});([^;]*(?:;[^;]*){5})/) :
#     ($cnt == 148) ? ($p=~/([^;]*(?:;[^;]*){20});([^;]*(?:;[^;]*){31});([^;]*(?:;[^;]*){31});([^;]*(?:;[^;]*){31});([^;]*(?:;[^;]*){31})/) :

   ($cnt == 11)  ? ($p=~/([^;]*(?:;[^;]*){5});([^;]*(?:;[^;]*){5})/) :
   ($cnt == 32)  ? ($p=~/([^;]*(?:;[^;]*){27});([^;]*(?:;[^;]*){4})/) :
#     ($cnt == 148) ? ($p=~/([^;]*(?:;[^;]*){20});([^;]*(?:;[^;]*){27});([^;]*(?:;[^;]*){3});([^;]*(?:;[^;]*){27});([^;]*(?:;[^;]*){3});([^;]*(?:;[^;]*){27});([^;]*(?:;[^;]*){3});([^;]*(?:;[^;]*){27});([^;]*(?:;[^;]*){3})/) :
   ($cnt == 148) ? ($p=~/([^;]*(?:;[^;]*){4});([^;]*(?:;[^;]*){5});([^;]*(?:;[^;]*){5});([^;]*(?:;[^;]*){3});([^;]*(?:;[^;]*){27});([^;]*(?:;[^;]*){3});([^;]*(?:;[^;]*){27});([^;]*(?:;[^;]*){3});([^;]*(?:;[^;]*){27});([^;]*(?:;[^;]*){3});([^;]*(?:;[^;]*){27});([^;]*(?:;[^;]*){3})/) :

   ($p)];
#    print Dumper($conv{$n}),"\n";
}

map { print SUF2 "$sufs{$_}\t$pcs{$sufs{$_}}\t$_\n" } sort {$pcs{$sufs{$b}} <=> $pcs{$sufs{$a}} || $sufs{$a} <=> $sufs{$b}} (keys(%sufs));

#  while (<ADB>) {
#    chomp;
#    s/\ti:(\d+)//;
#    print ADB2 "$_\n";
#  }

#  0
#  6 -> 6 -> 6
#  7 -> 7 -> 7
#  12 -> 6+6 -> 6+6
#  28 -> 7+7+7+7 -> 28
#  33 -> 7+7+7+7+4+1 -> 28+4+1 -> 28+5
#  149 -> 1+4+6+6+4+7+7+7+7+4+7+7+7+7+4+7+7+7+7+4+7+7+7+7+4 -> 9+6+6+32+32+32+32

#        1	0
#       12	6
#       27	7
#      718	12
#       18	28
#      221	33
#     1108	149

# NB! w/o "#"

#    if ($cnt == 11) {
#      my @pl=($p=~/([^;]*(?:;[^;]*){5});([^;]*(?:;[^;]*){5})/);
#      print join("/",@pl), "\n";
#    } elsif ($cnt == 148) {
#      # my @a=($p=~/([^;]*(?:;[^;]*){20})(?:;([^;]*(?:;[^;]*){31})){4}/); # matches only last group
#      my @pl=($p=~/([^;]*(?:;[^;]*){20});([^;]*(?:;[^;]*){31});([^;]*(?:;[^;]*){31});([^;]*(?:;[^;]*){31});([^;]*(?:;[^;]*){31})/);
#      print join("/",@pl), "\n";
#    } else {
#    }
