head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	2001.03.17.17.28.54;	author juri;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#!/usr/bin/perl -w
# -*- mode: Perl; coding: cyrillic-koi8; -*-
# $Id$
# Copyright (c) 2000  Juri Linkov <juri@@eta.org>
# This file is distributed under the terms of the GNU GPL.

# perl z2adb.pl z > z.adb 2> z.adb.err

my $vml = 0; # for multi-line variants

open(PATCH, "zexcept.subpatch") || warn "File not found: $@@";
my $line;
while (<PATCH>) {
  chomp;
  if (/^< /) {
    $line = substr($_, 2);
    $lineh{$line} = "";
  } elsif (/^> /) {
    $lineh{$line} .= substr($_, 2)
  }
}
close(PATCH);

while (<>) {
  chomp;
  my (%props, %zprops, %nprops);
  my ($o, $w, $nmn, $zvp, $zvs, $excp); # $o - original string
  $o = $_;

  if (s{(?://|=)>}{}) { $vml = 1 }
  elsif (s{<(?:=|//)}{}) { $vml++ }
  elsif ($vml) { $vml = 0 }
  if ($vml) { $props{'v'} = $vml }

  s/\s*$//;

  if (s/^([^\d]+)\s+([\d.,]+)\s+//) {
    $w = $1;
    $w =~ s/^христос$/Христос/;
    my $acc = $2;
    while ($acc =~ s(,(\d+))()) { substr($w, $1-1, 1) =~ tr(е)(ё) }
    $props{'a'} = $acc;
  } else { warn "Wrong format: $o\n"; next }

  # фразеологизмы
  if (s/\s*%\s*(.*)$//) { $props{'фр'} = $1 }
  # факультативная часть индекса
  if (!m|@@.*\[//| && s|\[//(.*)\]||) { $props{'фк'} = $1 }
  # глагол противоположного вида
  if (s/\s*\$\s*(.*)$//) { $props{'гпр'} = $1 }
  # дополнительные особенности в склонении
  if (s/(?:,)?\s*\#(\d+)\s*//) { $props{'до'} = $1 }
  # морфологически нерегулярные формы
  if (s/\s*@@\s*(.*)$//) {
#      local $_ = $1;
#      my $mnrf;
#      /_мн._ княз ьЯ, -Ей, -ьЯм/ && $mnrf = "_мн._ княз ьЯ, -Ей, -ьЯм" ||
#      if (defined $mnrf) { $props{'x'} = $mnrf } # x=eXception or $props{'mnrf'}
    my $exc = $1;
    ($exc =~ s/^(\S+):/:/) && ($_ .= "0".$1);
    if ($exc !~ /;/ && $exc =~ s/_исх\. форма нерегул\._//) {
      $excp = "{'ие'=>[{w=>'$w',a=>'$props{'a'}'}]}";
    } else {
      warn "\@@$exc\n";
      $excp = $lineh{$exc};
      (defined $excp) && ($exc eq $excp) && (undef $excp);
    }
  }
  # слово употребляется только в приводимых словосочетаниях
  if (m/:/ && (m/^[^\(\[]*:/ || !m/[\(\[][^\)\]]*:.*[\)\]]/)
     && s/\s*:\s*(.*)$//) { $props{'сл'} = $1 }
  # указания значения
  if (s/\(_([^\)]*?)_?\)\s*// # &&$1ne"в"&&$1ne"на"   # if(s|\(([^вн][^\)]*)\)||
    ) { $props{'к'} = $1 }
  # указания значения дополнительные
  if (s/\(_([^\)]*?)_?\)\s*// # &&$1ne"в"&&$1ne"на"   # if(s|\(([^вн][^\)]*)\)||
    ) { $props{'к2'} = $1 }
  # сведения о вариантах слова
  if (s/\[_([^\]]+)\]//) { $props{'к3'} = $1 }

  s/^\s*//; s/\s*$//;

  if (s/_Р\. мн\. затрудн\._//) { $zprops{'рм'} = "" }
  if (s/_Р\. затрудн\._//) { $zprops{'рм'} = "" }
  if (s/_мн\. затрудн\._//) { $zprops{'.м'} = "" }
  if (s/_кф м и ж затрудн\._//) { $zprops{'к.ем'} = ""; $zprops{'к.еж'} = "" }
  if (s/_кф м затрудн\._//) { $zprops{'к.ем'} = "" }
  if (s/_кф ж затрудн\._//) { $zprops{'к.еж'} = "" }
  if (s/_сравн\. затрудн\._//) { $zprops{'с'} = "" }
  if (s/_кф затрудн\._//) { $zprops{'к'} = "" }
  if (s/_кф и сравн\. затрудн\._//) { $zprops{'к'} = ""; $zprops{'с'} = "" }
  if (s/_косв\. формы затрудн\._//) { $zprops{'..'} = "" }
  if (s/_повел\. затрудн\._//) { $zprops{'!..'} = "" }
  if (s/_деепр\. затрудн\._//) { $zprops{'дн'} = "" }
  if (s/_наст\. 1 ед\. затрудн\._//) { $zprops{'н1е'} = "" }
  if (s/_буд\. 1 ед\. затрудн\._//) { $zprops{'б1е'} = "" }
  if (s/_прич\. страд\. наст\. затрудн\._//) { $zprops{'чнс'} = "" }

  if (s/_Р\. мн\. нет_//) { $nprops{'рм'} = "" }
  if (s/_кф м нет_//) { $nprops{'к.ем'} = "" }
  if (s/_кф и сравн\. нет_//) { $nprops{'к'} = ""; $nprops{'с'} = "" }
  if (s/_пф нет_//) { $nprops{'п'} = "" }
  if (s/_косв\. форм нет_//) { $nprops{'..'} = "" }
  if (s/_прич\. прош\. нет_//) { $nprops{'чпд'} = "" }
  if (s/_страд\. нет_//) { $nprops{'ч.с'} = "" }
  if (s/_деепр\. нет_//) { $nprops{'дн'} = "" }
  if (s/_наст\. 1 ед\. нет_//) { $nprops{'н1е'} = "" }
  if (s/_буд\. нет_//) { $nprops{'б..'} = "" }
  if (s/_буд\. 1 ед\. нет_//) { $nprops{'б1е'} = "" }

  if (s/_прич\. страд\._ -(.+)-//) { $props{'гпс'} = ($1 or "") }
  if (s/,\s*многокр\.//) { $props{'гмн'} = "" }
  if (s/,\s*безл\.//) { $props{'гбл'} = "" }

  # множественное число
  if (s/^мн\.\s*(_от_|неод\.|одуш\.)?\s*//) {
    if (defined $1) {
      if ($1 eq "одуш.") { @@props{'s','о','мн'} = ("с", "о", "") }
      elsif ($1 eq "неод.") { @@props{'s','о','мн'} = ("с", "н", "") }
      elsif ($1 eq "_от_") { $props{'мн'} = "от" }
    } else { $props{'мн'} = ($1 or "") }
  }

  # факультативные отклонения от стандартного склонения
  if (s/\[((?:"\d+")+)\]//) { my $osf = $1; $osf =~ s/\"//g; $props{'осф'} = $osf }
  # отклонения от стандартного склонения
  if (s/((?:"\d+")+)//) { my $os = $1; $os =~ s/\"//g; $props{'ос'} = $os }
  # чередование ё/е
  if (s/,\s*Ё\s*//) { $props{'чё'} = "" }
  # чередование о/е
  if (s/,\s*о\s*//) { $props{'чо'} = "" }
  # 2-й родительный падеж
  if (s/,\s*[Рр]2\s*//) { $props{'р2'} = "" }
  # 2-й предложный падеж
  if (s/,\s*[Пп]2(?: ?\((во?|на)\))?\s*//) { $props{'п2'} = ($1 or "") }
  # 2-й предложный падеж факультативный
  if (s/,\s*\[[Пп]2(?: ?\((во?|на)\))?\]\s*//) { $props{'п2ф'} = ($1 or "") }
  # определённые чередования
  if (!m/^[^*]*мн\./ && s/\*\*//) { $props{'ч2'} = "" }
  # чередование беглой гласной с нулём
  if (!m/^[^*]*мн\./ && s/\*//)   { $props{'ч'} = "" }
  # прочие чередования
  if (s/\(-(.{1,2})-\)//) { $props{'ч3'} = $1 }
  # форма затруднительна
  if (s/\!//) { $zvs = "" }
  # формы нет
  if (s/\?//) { $zvp = "" }
  # сравнительной степени нет
  if (s/\~//) { $nprops{'с'} = "" }
  s/,?\s*$//;
  # форма предположительна
  if (s/\-$//) { $nmn = "" }

  # 'и' - тип склонения/спряжения, 'у[12]' - схема ударения
  if (s/0\s*$//) { $props{'и'} = "0"; }
  elsif (s|(\d{1,2})([авсDеF](?:\'{1,2})?)(/[авсDеF](?:\'{1,2})?)?||) {
    $props{'и'} = $1;
    my $ud1 = $2;
    if (defined $3) {
      my $ud2 = $3; $ud2 =~ s(/)();
      $ud2 =~ tr/авсDеF/abcdef/; $ud2 =~ s/\'\'/2/; $ud2 =~ s/\'/1/;
      $props{'у2'} = $ud2;
    }
    $ud1 =~ tr/авсDеF/abcdef/; $ud1  =~ s/\'\'/2/; $ud1  =~ s/\'/1/;
    $props{'у1'} = $ud1;
  }
  if (s/^(н?св(?:-нсв)?)\s*(нп)?\s*//) {
    $props{'s'} = "г"; $props{'гв'} = $1;
    $props{'гп'} = $2 || $w =~ /с[яь]$/ && "нп" || "п";
  }

  s/(мо-жо) жо/$1/; # у общего рода морф.род всегда женский

  s/,?\s*//;

  if (s|^([мжс])о?//\1о?,?||) {
    ($props{'s'}, $props{'р'}, $props{'о'}) = ("с", $1, "но");
  } elsif (s|^([мжс])(о?)//([мжс])(о?),?||) {
    if ($1 ne $3 && $2 eq $4) {
      @@props{'s','р'} = ("с", "$1$3");
      $props{'о'} = (defined $2 && $2 ne "") && "о" || "н";
    } else { warn "$w: Different gender with equal animate: $o\n" }
  } elsif (s/^мо-жо//) {
    @@props{'s','р','о','рм'} = ("с", "о", "о", "ж"); # о = общ.род
  } elsif (s/^([мжс])(о)?(?![юресо])//) {
    @@props{'s','р'} = ("с", $1); $props{'о'} = $2 if defined $2;
  } elsif (s/^(п|мс-п|мс|числ\.-п)(?![р])//) {
    my $chr = $1; $chr =~ s/\.//;
    if (!defined $props{'s'}) { $props{'s'} = $chr }
    else { $props{'s2'} = $chr } # доп. часть речи (морф.)
  } elsif (s/^(н|предик\.|межд\.|предл\.|част\.|союз|вводн\.|сравн\.|числ\.)//) {
    my $chr = $1; $chr =~ s/\.//; $props{'s'} = $chr; $props{'и'} = "0";
  }
  if (s/^ //) {
    if (s/^([мжс])(о)?(?![с])//) {
      if (!defined $props{'р'}) { $props{'р'} = $1 }
      else { $props{'рм'} = $1 } # морф.род
      $props{'о'} = $2 if (!defined $props{'о'} && defined $2);
    } elsif (s/^(п|мс-п|мс|числ\.-п)//) {
      my $chr = $1; $chr =~ s/\.//;
      if (!defined $props{'s'}) { $props{'s'} = $chr }
      else { $props{'s2'} = $chr } # доп. часть речи (морф.)
    }
  }

  s/,?\s*//;

  if ($_ ne "") {
    if (defined $props{'s'} && $props{'s'} eq "числ") {
      $props{'s2'} = "ч";
      my $exc = "$w: $_";
      warn ":числ:$exc\n";
      $excp = $lineh{$exc};
      (defined $excp) && ($exc eq $excp) && (undef $excp);
    } else {
      warn "$w: > $_: $o\n"; next
    }
  }

  if (defined $nmn) {           # форма предположительна
    if ($props{'s'} eq "п") { $props{'p'} = "к.ем" }
    elsif ($props{'s'} eq "с") { $props{'p'} = ".м" }
  }

  if (defined $zvs) {           # форма затруднительна
    if ($props{'s'} eq "г") { $zprops{'чпс'} = "" }
    elsif ($props{'s'} eq "п") { $zprops{'к'} = "" }
  }

  if (defined $zvp) {           # формы нет
    if ($props{'s'} eq "г") { $nprops{'чпс'} = "" }
    elsif ($props{'s'} eq "п") { $nprops{'к.ем'} = ""; $zprops{'к'} = "" }
  }

  if (%zprops) { $props{'z'} = "^".join("|^", sort(keys %zprops)) }
  if (%nprops) { $props{'n'} = "^".join("|^", sort(keys %nprops)) }

  print "w:$w", map ({
    "\t$_" . ($props{$_} ne "" ? ":" . $props{$_} : "")
  } sort(keys %props)), (defined $excp && "\texc::$excp"), "\n";

  next
}
@
